import requests

def fetch_country_by_name(name):
    url = f"https://restcountries.com/v3.1/name/{name}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()[0]
    else:
        print(f"❌ Error: Could not fetch data for '{name}'.")
        return None

def fetch_country_by_code(code):
    url = f"https://restcountries.com/v3.1/alpha/{code}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()[0]
    else:
        return None

def display_comparison(main, neighbor):
    print(f"\n🔁 Comparing {main.get('name', {}).get('common', 'N/A')} vs {neighbor.get('name', {}).get('common', 'N/A')}")
    print("-" * 75)
    print(f"{'Field':<15} | {main.get('name', {}).get('common', 'N/A'):<25} | {neighbor.get('name', {}).get('common', 'N/A'):<25}")
    print(f"{'Capital':<15} | {main.get('capital', ['N/A'])[0]:<25} | {neighbor.get('capital', ['N/A'])[0]:<25}")
    print(f"{'Region':<15} | {main.get('region', 'N/A'):<25} | {neighbor.get('region', 'N/A'):<25}")
    print(f"{'Population':<15} | {main.get('population', 0):<25,} | {neighbor.get('population', 0):<25,}")
    print(f"{'Area (km²)':<15} | {main.get('area', 0):<25,.0f} | {neighbor.get('area', 0):<25,.0f}")
    print(f"{'Languages':<15} | {', '.join(main.get('languages', {}).values()):<25} | {', '.join(neighbor.get('languages', {}).values()):<25}")

# 🚀 Main Program
print("🌐 Country vs Bordering Nations Comparator")

country_name = input("Enter a country name (e.g., India): ")
main_country = fetch_country_by_name(country_name)

if main_country:
    borders = main_country.get("borders", [])
    if not borders:
        print("⚠️ This country has no bordering nations (island or borderless).")
    else:
        print(f"🌍 {main_country['name']['common']} has {len(borders)} bordering country(ies).")

        for code in borders:
            neighbor = fetch_country_by_code(code)
            if neighbor:
                display_comparison(main_country, neighbor)
